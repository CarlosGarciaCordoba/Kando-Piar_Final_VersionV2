-- =============================================
-- SISTEMA PIAR - BASE DE DATOS INICIAL
-- Sistema de Login y Estructura Básica
-- =============================================

-- Extensiones necesarias
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- =============================================
-- TABLA DE COLEGIOS
-- =============================================
CREATE TABLE colegios (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    codigo_institucion VARCHAR(10) UNIQUE NOT NULL,
    nombre VARCHAR(200) NOT NULL,
    estado BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =============================================
-- TABLA DE SEDES
-- =============================================
CREATE TABLE sedes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    colegio_id UUID REFERENCES colegios(id) ON DELETE CASCADE,
    codigo_sede VARCHAR(5) NOT NULL,
    nombre VARCHAR(200) NOT NULL,
    codigo_completo VARCHAR(15) UNIQUE NOT NULL, -- Código institución + sede
    estado BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(colegio_id, codigo_sede)
);

-- =============================================
-- TABLA DE GRADOS
-- =============================================
CREATE TABLE grados (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    sede_id UUID REFERENCES sedes(id) ON DELETE CASCADE,
    grado VARCHAR(10) NOT NULL, -- 1, 2, 3, ..., 11
    nivel VARCHAR(20) NOT NULL, -- Primaria, Secundaria, Media
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =============================================
-- TABLA DE USUARIOS
-- =============================================
CREATE TABLE usuarios (
    cedula VARCHAR(20) PRIMARY KEY,
    codigo_usuario VARCHAR(3) UNIQUE NOT NULL,
    nombres VARCHAR(100) NOT NULL,
    apellidos VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    telefono VARCHAR(20),
    password_hash VARCHAR(255) NOT NULL,
    codigo_institucion VARCHAR(15) NOT NULL,
    estado BOOLEAN DEFAULT true,
    debe_cambiar_password BOOLEAN DEFAULT true,
    ultimo_acceso TIMESTAMP,
    intentos_fallidos INTEGER DEFAULT 0,
    bloqueado_hasta TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (codigo_institucion) REFERENCES sedes(codigo_completo)
);

-- =============================================
-- FUNCIONES
-- =============================================

-- Función para generar código de usuario único
CREATE OR REPLACE FUNCTION generar_codigo_usuario(p_nombres TEXT, p_apellidos TEXT)
RETURNS VARCHAR(3) AS $$
DECLARE
    codigo_base VARCHAR(3);
    codigo_final VARCHAR(3);
    contador INTEGER := 1;
    primera_inicial CHAR(1);
    segunda_inicial CHAR(1);
BEGIN
    primera_inicial := UPPER(SUBSTRING(TRIM(p_nombres), 1, 1));
    segunda_inicial := UPPER(SUBSTRING(TRIM(p_apellidos), 1, 1));
    codigo_base := primera_inicial || segunda_inicial;
    
    WHILE contador <= 99 LOOP
        IF contador <= 9 THEN
            codigo_final := codigo_base || contador::TEXT;
        ELSE 
            codigo_final := codigo_base || CHR(65 + ((contador - 10) % 26));
        END IF;
        
        IF NOT EXISTS (SELECT 1 FROM usuarios WHERE codigo_usuario = codigo_final) THEN
            RETURN codigo_final;
        END IF;
        
        contador := contador + 1;
    END LOOP;
    
    RAISE EXCEPTION 'No se pudo generar un código único para: % %', p_nombres, p_apellidos;
END;
$$ LANGUAGE plpgsql;

-- Función para validar contraseña segura
CREATE OR REPLACE FUNCTION validar_password_segura(password TEXT)
RETURNS BOOLEAN AS $$
BEGIN
    IF LENGTH(password) < 10 THEN
        RETURN FALSE;
    END IF;
    
    IF (SELECT LENGTH(REGEXP_REPLACE(password, '[^0-9]', '', 'g'))) < 3 THEN
        RETURN FALSE;
    END IF;
    
    IF (SELECT LENGTH(REGEXP_REPLACE(password, '[^A-Z]', '', 'g'))) < 2 THEN
        RETURN FALSE;
    END IF;
    
    IF (SELECT LENGTH(REGEXP_REPLACE(password, '[^a-z]', '', 'g'))) < 2 THEN
        RETURN FALSE;
    END IF;
    
    IF (SELECT LENGTH(REGEXP_REPLACE(password, '[A-Za-z0-9]', '', 'g'))) < 2 THEN
        RETURN FALSE;
    END IF;
    
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql;

-- =============================================
-- TRIGGERS
-- =============================================

-- Trigger para generar código de usuario
CREATE OR REPLACE FUNCTION trigger_generar_codigo_usuario()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.codigo_usuario IS NULL OR NEW.codigo_usuario = '' THEN
        NEW.codigo_usuario := generar_codigo_usuario(NEW.nombres, NEW.apellidos);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER usuarios_generar_codigo
    BEFORE INSERT ON usuarios
    FOR EACH ROW
    EXECUTE FUNCTION trigger_generar_codigo_usuario();

-- Trigger para actualizar timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_usuarios_updated_at
    BEFORE UPDATE ON usuarios
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- =============================================
-- ÍNDICES
-- =============================================
CREATE INDEX idx_usuarios_codigo_institucion ON usuarios(codigo_institucion);
CREATE INDEX idx_usuarios_estado ON usuarios(estado);
CREATE INDEX idx_usuarios_email ON usuarios(email);
CREATE INDEX idx_sedes_codigo_completo ON sedes(codigo_completo);
CREATE INDEX idx_colegios_codigo_institucion ON colegios(codigo_institucion);
CREATE INDEX idx_grados_sede ON grados(sede_id, grado);

-- =============================================
-- VISTAS
-- =============================================
CREATE VIEW vista_usuarios_completa AS
SELECT 
    u.cedula,
    u.codigo_usuario,
    u.nombres,
    u.apellidos,
    u.email,
    u.telefono,
    u.codigo_institucion,
    c.nombre AS colegio_nombre,
    s.nombre AS sede_nombre,
    u.estado,
    u.ultimo_acceso,
    u.debe_cambiar_password,
    u.created_at
FROM usuarios u
JOIN sedes s ON u.codigo_institucion = s.codigo_completo
JOIN colegios c ON s.colegio_id = c.id;

-- =============================================
-- RESTRICCIONES
-- =============================================
ALTER TABLE usuarios 
ADD CONSTRAINT check_email_format 
CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$');

ALTER TABLE usuarios 
ADD CONSTRAINT check_telefono_format 
CHECK (telefono ~ '^[0-9]{10}$');

ALTER TABLE usuarios 
ADD CONSTRAINT check_codigo_usuario_format 
CHECK (codigo_usuario ~ '^[A-Z0-9]{3}$');





